{"name":"iOS.OldFilmFilter","tagline":"Xamarin.iOS recipe using CIImage Filters to apply an Old Film effect","body":"iOS.OldFilmFilter\r\n=================\r\n\r\nXamarin.iOS recipe using Core Image Filters to apply an Old Film effect\r\n\r\nThis is my sample recipe for the [Xamarin Recipe Cook-Off](http://blog.xamarin.com/xamarin-recipe-cook-off/). This sample will show how to take an image with your device and apply an old film effect. To handle the picture taking code I used the [Xamarin.Mobile component](http://components.xamarin.com/view/xamarin.mobile/).\r\n\r\nScreenshot\r\n-------\r\n![iOS.OldFilmFilter Screenshot](\r\nhttps://raw.github.com/dannycabrera/iOS.OldFilmFilter/master/Screenshots/CombinedScreenshot.png)\r\n\r\nHow to apply Old Film Effect\r\n-------\r\nThe process involves applying a Sepia Tone filter, generating random white-specks (colored noise) and blending them together.\r\n\r\n1. Apply the Sepia Tone filter to the image:\r\n```\r\nvar sep = new CISepiaTone() \r\n{\r\n\tImage = ciimage,\r\n\tIntensity = 1F\r\n};\r\n```\r\n\r\n2. Create random white-specks. This process involves generating colored noise by calling RandomGenerator() and then processing the noise so that we only get white specks calling ColorMatrix().\r\n```\r\npublic CIImage ColorMatrix()\r\n{\r\n\tvar rVector = new CIVector (0F, 0.1F, 0F, 0F); \r\n\tvar gVector = new CIVector (0F, 0.1F, 0F, 0F);  \r\n\tvar bVector = new CIVector (0F, 0.1F, 0F, 0F); \r\n\tvar biasVector = new CIVector (0F, 0F, 0F, 0F); \r\n\r\n\tvar colorMatrix = new CIColorMatrix ()\r\n\t{\r\n\t\tImage = RandomGenerator(),\r\n\t\tRVector = rVector,\r\n\t\tGVector = gVector,\r\n\t\tBVector = bVector,\r\n\t\tBiasVector = biasVector\r\n\t};\r\n\r\n\treturn colorMatrix.OutputImage;\r\n}\r\n```\r\n```\t\r\npublic CIImage RandomGenerator()\r\n{\r\n\tvar random = new CIRandomGenerator ();\r\n\treturn Crop (random);\r\n}\r\n```\r\n\r\n3. Once we have the Sepia Tone and the white-specks images, we blend them using CISourceOverCompositing().\r\n```\r\nvar comp = new CISourceOverCompositing () {\r\n\tImage = ColorMatrix(),\r\n\tBackgroundImage = sep.OutputImage\r\n};\r\n```\r\n\r\n4. The final step is to render the filters into an image and display a preview on the image view.\r\n```\r\nvar output = comp.OutputImage;\r\nvar context = CIContext.FromOptions(null);\r\nimg.Dispose (); // clear image\r\nimg = UIImage.FromImage (context.CreateCGImage (output, output.Extent));\r\nimageView.Image = img;\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}